#include <stdint.h>
/**
// !> \file
// !> \brief memory arena structures
*/

//!> symbol table entry
typedef struct{
  uint32_t lock;             //!< to lock this memory block
  uint32_t flags;            //!< control flags
  uint32_t data_index;       //!< index relative to start of memory arena
  uint32_t data_size;        //!< size of data portion of block (64 bit units)
  uint64_t data_name;        //!< block name (max 8 characters)
} symtab_entry;
//!> size of a symbol table entry in arena table
#define SymtabEntrySize64 (sizeof(symtab_entry) / sizeof(uint64_t))

//!> memory arena information
typedef struct{              //!< MUST BE CONSISTENT WITH arena_header
  uint32_t lock;             //!< to lock this memory arena
  uint32_t owner;            //!< MPI rank or PID of owner process
  uint32_t max_entries;      //!< max number of entries in t[]
  uint32_t first_free;       //!< index of first free location in arena
  uint32_t n_entries;        //!< number of entries in use in t[]
  uint32_t arena_size;       //!< size of memory arena (data + metadata) (64 bit units)
  symtab_entry t[];          //!< symbol table entries for memory blocks in this arena
} memory_arena;
//!> size of memory arena header (no symbol table)
#define ArenaHeaderSize64 (sizeof(memory_arena) / sizeof(uint64_t))

//!> description of a memory arena
typedef struct{
  uint64_t arena_name;       //!< name of segment (max 8 characters)
  size_t   arena_sz;         //!< size of segment
  int      arena_id;         //!< shared memory id of shared memory segment
  int      owner_id;         //!< id of process that owns the segment
}master_entry;               //!< there will be one entry per memory arena in master table

//!> max number of arenas in master arena
#define MAX_MASTER 256

#if 0
//!> header of master arena (only used to compute the master header size)
typedef struct{
  uint32_t lock;             //!< to lock master arena
  int      arena_id;         //!< shared memory id of master arena
  uint64_t arena_name;       //!< name of master arena  (max 8 characters)
  size_t   arena_sz;         //!< size of master arena segment
  master_entry me[MAX_MASTER];
} master_header;
//!> size of master arena header (old way)
#define OldMasterHeaderSize64 (sizeof(master_header) / sizeof(uint64_t))
#endif

//!> master arena contains the master table, followed by a memory arena
typedef struct{
  uint32_t lock;             //!< to lock master arena
  int      arena_id;         //!< shared memory id of master arena
  uint64_t arena_name;       //!< name of master arena
  size_t   arena_sz;         //!< size of master arena segment
  master_entry me[MAX_MASTER];  //!< size of the master table
  memory_arena ma;           //!< master memory arena, will contain the other arenas
} master_arena;
//!> size of master arena header (new way)
#define MasterHeaderSize64 ( (sizeof(master_arena) - sizeof(memory_arena) ) / sizeof(uint64_t))

//!> arena description in local memory (one entry per memory arena)
typedef struct{
  uint64_t arena_name;       //!< same as in associated master arena table
  size_t   arena_sz;         //!< same as in associated master arena table
  memory_arena *ma;          //!< pointer to memory arena in local process space
}local_entry;

//!> copy in local process memory pointing to memory arenas
typedef struct{
  uint32_t     lock;            //!< should not be necessary
  int          master_id;       //!< shared memory id of master arena
  size_t       master_sz;       //!< size of segment
  master_arena *MA;             //!< pointer to master arena
  local_entry  le[MAX_MASTER];  //!< table in local memory describing memory arenas
}local_arena;

//!> memory block header
typedef struct{
  uint32_t fwd;              //!< forward index to next block (64 bit units) (0 for last block)
  uint32_t ix;               //!< index to this block (64 bit units)
  uint32_t nwd;              //!< length of data portion of block (in 64 bit units)
  uint32_t sign;             //!< low marker signature
}block_header;
//!> size of memory block header
#define BlockHeaderSize64 (sizeof(block_header) / sizeof(uint64_t))

//!> memory block trailer
typedef struct{
  uint32_t sign;             //!< high marker signature
  uint32_t bwd;              //!< backward index to start of this block (in 64 bit units)
}block_tail;
//!> size of memory block trailer
#define BlockTailSize64 (sizeof(block_tail) / sizeof(uint64_t))
