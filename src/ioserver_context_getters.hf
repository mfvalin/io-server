
!> Query whether this context belongs to a relay process (can be either server- or model-bound)
function ioctx_is_relay(context) result(is_relay)
  implicit none
  class(ioserver_context), intent(in) :: context !< ioserver_context instance
  logical :: is_relay !< Whether this context belongs to a relay PE
  is_relay = is_color_relay(context % color)
end function ioctx_is_relay

!> Whether this context belongs to a server process
function ioctx_is_server(context) result(is_server)
  implicit none
  class(ioserver_context), intent(in) :: context
  logical :: is_server
  is_server = is_color_server(context % color)
end function ioctx_is_server

!> Whether this context belongs to a model process
function ioctx_is_model(context) result(is_model)
  implicit none
  class(ioserver_context), intent(in) :: context
  logical :: is_model
  is_model = is_color_model(context % color)
end function ioctx_is_model

!> Whether this context belongs to a process that handles communications going towards the server
function ioctx_is_server_bound(context) result(is_server_bound)
  implicit none
  class(ioserver_context), intent(in) :: context
  logical :: is_server_bound
  is_server_bound = iand(context % color, SERVER_BOUND_COLOR) == SERVER_BOUND_COLOR
end function ioctx_is_server_bound

!> Whether this context belongs to a process that handles communications going towards the model
function ioctx_is_model_bound(context) result(is_model_bound)
  implicit none
  class(ioserver_context), intent(in) :: context
  logical :: is_model_bound
  is_model_bound = iand(context % color, MODEL_BOUND_COLOR) == MODEL_BOUND_COLOR
end function ioctx_is_model_bound

!> Whether this context belongs to a process that serves as a MPI communication channel (on server only)
function ioctx_is_channel(context) result(is_channel)
  implicit none
  class(ioserver_context), intent(in) :: context
  logical :: is_channel
  is_channel = iand(context % color, CHANNEL_COLOR) == CHANNEL_COLOR
end function ioctx_is_channel

!> Whether this context belongs to a process that processes streams (command and data) on the server
function ioctx_is_stream_processor(context) result(is_stream_processor)
  implicit none
  class(ioserver_context), intent(in) :: context
  logical :: is_stream_processor
  is_stream_processor = iand(context % color, STREAM_PROCESSOR_COLOR) == STREAM_PROCESSOR_COLOR
end function ioctx_is_stream_processor

!> Whether this context belongs to a NO-OP process
function ioctx_is_no_op(context) result(is_no_op)
  implicit none
  class(ioserver_context), intent(in) :: context
  logical :: is_no_op
  is_no_op = iand(context % color, NO_OP_COLOR) == NO_OP_COLOR
end function ioctx_is_no_op

!> Check whether this context has been successfully initialized
function ioctx_is_initialized(context) result(is_initialized)
  implicit none
  class(ioserver_context), intent(in) :: context
  logical :: is_initialized
  is_initialized = context % color .ne. NO_COLOR
end function ioctx_is_initialized

!> Whether debug mode is enabled for this context. See ioserver_input_parameters::debug_level
function ioctx_get_debug_level(context) result(debug_level)
  implicit none
  class(ioserver_context), intent(in) :: context
  integer :: debug_level
  debug_level = context % params % debug_level
end function ioctx_get_debug_level

!> Contruct and return a string containing human-readable info about the calling process
function ioctx_get_detailed_pe_name(context) result(detailed_name)
  implicit none
  class(ioserver_context), intent(in) :: context
  character(len=:), allocatable :: detailed_name
  detailed_name = context % detailed_pe_name
end function ioctx_get_detailed_pe_name

function ioctx_get_short_pe_name(context) result(name)
  implicit none
  class(ioserver_context), intent(in) :: context
  character(len=:), allocatable :: name
  name = context % short_pe_name
end function ioctx_get_short_pe_name

!> Check whether the "time-to-quit" flag has been set on this node
function ioctx_is_time_to_quit(context) result(is_time_to_quit)
  implicit none
  class(ioserver_context), intent(in) :: context
  logical :: is_time_to_quit
  is_time_to_quit = (context % shmem % time_to_quit == 1)
end function ioctx_is_time_to_quit

!> Get number of model processes on this node
function ioctx_get_num_local_model(context) result(num_model)
  implicit none
  class(ioserver_context), intent(in) :: context
  integer :: num_model
  num_model = context % num_local_model_proc
end function ioctx_get_num_local_model

!> Get total number of model PEs that connect to the IO server
function ioctx_get_num_total_model(context) result(num_model)
  implicit none
  class(ioserver_context), intent(in) :: context
  integer :: num_model
  num_model = context % num_model_pes
end function ioctx_get_num_total_model

!> Get rank of this process on the global communicator
function ioctx_get_global_rank(context) result(global_rank)
  implicit none
  class(ioserver_context), intent(in) :: context
  integer :: global_rank
  global_rank = context % global_rank
end function ioctx_get_global_rank

!> Get the comm_rank_size object corresponding to the given input color
function ioctx_get_crs(context, color) result(crs)
  implicit none
  class(ioserver_context), intent(in)        :: context
  integer,                 intent(IN), value :: color
  type(comm_rank_size) :: crs

  integer :: ierr

  crs = comm_rank_size(MPI_COMM_NULL, -1, 0)
  
  select case(color)
    case(NO_COLOR)                                ! Everyone that did context init (i.e. global_comm)
      crs % comm = context % global_comm

    case(SERVER_COLOR + MODEL_COLOR + RELAY_COLOR)! all non NO-OP PEs               (subset of global_comm)
      crs % comm = context % active_comm

    case(NODE_COLOR)                              ! all PEs on this SMP node        (subset of global_comm)
      crs % comm = context % node_comm

    case(SERVER_COLOR - CHANNEL_COLOR)            ! server PEs that can do work     (subset of server_comm, itself a subset of active_comm. excludes channel)
      crs % comm = context % server_work_comm

    case(MODEL_COLOR + RELAY_COLOR)               ! compute and relay PEs           (subset of active_comm)
      crs % comm = context % model_relay_comm

    case(MODEL_COLOR)                             ! all model compute PEs           (subset of active_comm, model_relay_comm)
      crs % comm = context % model_comm

    case(RELAY_COLOR)                             ! all IO relay PEs                (subset of active_comm, model_relay_comm)
      crs % comm = context % relay_comm

    case(MODEL_COLOR + RELAY_COLOR + NODE_COLOR)  ! compute and relay PEs on SMP node (subset of node_comm, model_comm, iorelay_comm)
      crs % comm = context % model_relay_smp_comm

    case(MODEL_COLOR + NODE_COLOR)                ! compute PEs on SMP node         (subset of  node_comm, model_comm)
      crs % comm = context % model_smp_comm

    case(RELAY_COLOR + NODE_COLOR)                ! relay PEs on SMP node           (subset of  node_comm, iorelay_comm)
      crs % comm = context % relay_smp_comm
    
    case(RELAY_COLOR + NODE_COLOR + SERVER_BOUND_COLOR) ! server-bound relay PEs on SMP node (subset of relay_smp_comm)
      crs % comm = context % server_bound_relay_smp_comm

    case(RELAY_COLOR + NODE_COLOR + MODEL_BOUND_COLOR)  ! model-bound relay PEs on SMP node (subset of relay_smp_comm)
      crs % comm = context % model_bound_relay_smp_comm

    case(RELAY_COLOR + SERVER_COLOR)              ! relay and server PEs            (subset of active_comm)
      crs % comm = context % io_comm

    case(SERVER_COLOR)                            ! Active server PEs
      crs % comm = context % server_comm

    case(STREAM_PROCESSOR_COLOR)
      crs % comm = context % stream_processor_server_comm

    case(STREAM_PROCESSOR_COLOR + SERVER_COLOR)    ! Same as just "STREAM_PROCESSOR_COLOR"
      crs % comm = context % stream_processor_server_comm

    case(SERVER_COLOR + SERVER_BOUND_COLOR)
      crs % comm = context % server_bound_server_comm

    case(SERVER_COLOR + MODEL_BOUND_COLOR)
      crs % comm = context % model_bound_server_comm

    case(CHANNEL_COLOR + SERVER_BOUND_COLOR + MODEL_BOUND_COLOR)
      crs % comm = context % server_dcb_comm

    case default
      crs % comm = MPI_COMM_NULL
  end select

  if(crs % comm .ne. MPI_COMM_NULL) then
    call MPI_Comm_rank(crs % comm, crs % rank, ierr)
    call MPI_Comm_size(crs % comm, crs % size, ierr)
  endif
end function ioctx_get_crs

!> Get the local shmem_heap that belongs to this PE
function ioctx_get_local_heap(context) result(h)
  implicit none
  class(ioserver_context), intent(inout) :: context
  type(shmem_heap) :: h
  h = context % local_heap
end function ioctx_get_local_heap

!> Get the local shmem_heap that belongs to this node (server only?)
function ioctx_get_node_heap(context) result(h)
  implicit none
  class(ioserver_context), intent(inout) :: context
  type(shmem_heap) :: h
  h = context % node_heap
end function ioctx_get_node_heap

!> Get the local accessor to the model-bound CB that belongs to this process
function ioctx_get_model_bound_cb(context) result(cio)
  implicit none
  class(ioserver_context), intent(inout) :: context
  type(circular_buffer) :: cio
  cio = context % local_cio_in
end function ioctx_get_model_bound_cb

!> Get the local accessor to the server-bound CB that belongs to this process
function ioctx_get_server_bound_cb(context) result(cio)
  implicit none
  class(ioserver_context), intent(inout) :: context
  type(circular_buffer) :: cio
  cio = context % local_server_bound_cb
end function ioctx_get_server_bound_cb

!> Get the DCB created when initializing this context
function ioctx_get_dcb(context) result(dcb)
  implicit none
  class(ioserver_context), intent(in) :: context
  type(distributed_circular_buffer) :: dcb
  dcb = context % local_dcb
end function ioctx_get_dcb

!> Get the messenger object created for this context
function ioctx_get_messenger(context) result(messenger)
  implicit none
  class(ioserver_context), intent(inout) :: context
  type(ioserver_messenger), pointer :: messenger
  messenger => context % messenger
end function ioctx_get_messenger

!> Get a local accessor to a specific stream
subroutine ioctx_get_stream(context, stream_rank, stream)
  implicit none
  class(ioserver_context), intent(inout) :: context
  integer,                 intent(in)    :: stream_rank !< Rank of the stream we want to access
  type(local_server_stream), pointer, intent(out) :: stream
  stream => context % local_server_streams(stream_rank)
end subroutine ioctx_get_stream

!> Get the value of relay_pipeline_depth
function ioctx_get_relay_pipeline_depth(context) result(depth)
  implicit none
  class(ioserver_context), intent(in) :: context
  integer :: depth
  depth = context % params % relay_pipeline_depth
end function ioctx_get_relay_pipeline_depth

!> Get the value of server_pipeline_depth
function ioctx_get_server_pipeline_depth(context) result(depth)
  implicit none
  class(ioserver_context), intent(in) :: context
  integer :: depth
  depth = context % params % server_pipeline_depth
end function ioctx_get_server_pipeline_depth

!> Get the max number of streams that can be open concurrently
function ioctx_get_max_num_streams(context) result(num_streams)
  implicit none
  class(ioserver_context), intent(in) :: context
  integer :: num_streams
  num_streams = context % params % max_num_concurrent_streams
end function ioctx_get_max_num_streams

!> Get the list of local accessors to the server-bound CBs created on this node
subroutine ioctx_get_server_bound_cb_list(context, cb_list)
  implicit none
  class(ioserver_context),                      intent(in)  :: context !< The ioserver_context instance
  type(circular_buffer), dimension(:), pointer, intent(out) :: cb_list !< Pointer to the local list of server-bound CBs
  cb_list => context % server_bound_cbs
end subroutine ioctx_get_server_bound_cb_list

!> Get the list of local accessors to the heaps created on this node
subroutine ioctx_get_heap_list(context, heap_list)
  implicit none
  class(ioserver_context), intent(in)  :: context   !< The ioserver_context instance
  type(shmem_heap), dimension(:), pointer, intent(out) :: heap_list !< Pointer to the local list of model heaps
  heap_list => context % local_heaps
end subroutine ioctx_get_heap_list
